name: test-module-storage

on: [push]

jobs:
  test-module-storage:
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3
          DEFAULT_REGION: us-east-1
          FORCE_NONINTERACTIVE: true
          HOSTNAME: localhost
          USE_SSL: false
          DEBUG: 1
        ports:
          - "4566-4599:4566-4599"
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 14
    - uses: zhulik/redis-action@1.1.0
      with:
        redis version: 5
        number of databases: 1
    - name: Optionally install Chromium via APT instead of puppeteer
      run: |
        if [ ! -z "$PUPPETEER_SKIP_CHROMIUM_DOWNLOAD" ]; then
          APT_INSTALL="chromium gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget"
          if [ ! -z "$APT_PROXY" ]; then
            echo "deb $APT_PROXY buster main" > /etc/apt/sources.list
          fi
          apt-get update
          apt-get install -y $APT_INSTALL
        fi
    - name: Optionally install AWS-CLI via PIP for using own localstack with 'act'
      run: |
        if [ ! -z "$INSTALL_AWSCLI" ]; then
          mkdir -p /usr/share/man/man1
          apt install -y python3 python3-pip
          python3 -m pip install awscli
        fi
    - name: Set up project
      run: |
        USE_S3_ENDPOINT="$S3_ENDPOINT"
        if [ -z "$USE_S3_ENDPOINT" ]; then
          USE_S3_ENDPOINT="http://localhost:4566"
          export S3_ENDPOINT="$USE_S3_ENDPOINT"
        fi
        aws --endpoint-url=$USE_S3_ENDPOINT s3 mb s3://testing
        aws --endpoint-url=$USE_S3_ENDPOINT s3 mb s3://testing2
        HERE=`pwd`
        mkdir /tmp/project
        cd /tmp/project
        if [ -d /opt/hostedtoolcache/node/ ]; then
          export alias node=`find /opt/hostedtoolcache/node/ -maxdepth 4 -name node`
          export alias npm=`find /opt/hostedtoolcache/node/ -maxdepth 4 -name npm`
        fi
        npm init -y
        npm install "$HERE" @userdashboard/dashboard @userdashboard/organizations @userdashboard/storage-redis mocha faker puppeteer
        PACKAGE=`cat package.json`
        PACKAGE=${PACKAGE/\"author\"\: \"\"/\"dashboard\": \{ \"modules\"\: \[\"@userdashboard/organizations\"\] \}}
        echo $PACKAGE > package.json
        echo "global.applicationPath = __dirname" > main.js
        echo "require('@userdashboard/storage-s3/test-helper.js')" >> main.js
      env:
        AWS_SECRET_ACCESS_KEY: using-mock-aws-s3
        AWS_ACCESS_KEY_ID: using-mock-aws-s3
    - name: Test as module storage with Dashboard on other type
      run: |
        if [ -z "$S3_ENDPOINT" ]; then
          export S3_ENDPOINT="http://localhost:4566"
        fi
        ./node_modules/.bin/mocha --file main.js --exit --recursive --timeout 90000000 $(find ./node_modules/@userdashboard/*/ -name "*.test.js" | grep -i -v [a-z0-9]/node_modules | sort -k5.1,8.1 -t /)
      working-directory: /tmp/project
      env:
        NODE_ENV: testing
        STORAGE: "@userdashboard/storage-redis"
        REDIS_URL: redis://localhost:6379
        ORGANIZATIONS_STORAGE: "@userdashboard/storage-s3"
        ORGANIZATIONS_S3_BUCKET_NAME: testing
        ORGANIZATIONS_SECRET_ACCESS_KEY: using-mock-aws-s3
        ORGANIZATIONS_ACCESS_KEY_ID: using-mock-aws-s3
        NODE_OPTIONS: --preserve-symlinks
